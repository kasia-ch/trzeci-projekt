{"version":3,"sources":["SearchCity/SearchCity.js","ViewWeather/ViewWeather.js","App.js","serviceWorker.js","index.js"],"names":["SearchCity","this","props","value","change","submit","className","style","type","name","placeholder","aria-label","aria-describedby","onChange","event","id","onClick","React","Component","ViewWeather","rainForecast","snowForecast","weather","city","date","geoCoords","sunrise","sunset","temp","temp_min","temp_max","pressure","wind","humidity","rain","snow","cloudiness","error","scope","moment","format","APIKey","App","handleInputChange","setState","target","handleCitySubmit","preventDefault","axios","get","state","then","res","weatherData","data","console","log","imBusy","coord","lat","lon","sys","main","speed","clouds","all","catch","prevState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.819afc80.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchCity.css';\r\n\r\n\r\nclass SearchCity extends React.Component {\r\n    render() {\r\n        const { value, change, submit } = this.props\r\n\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"mx-auto text-center\" style={{ \"width\": \"90%\" }}> Current weather and forecasts in your city</h1>\r\n                    <div className=\"input-group input-group-sm mb-3 container\">\r\n                        <input type=\"text\" name=\"input\" className=\"form-control\" placeholder=\"City name\" aria-label=\"city name\"\r\n                            aria-describedby=\"button-addon\"\r\n                            value={value}\r\n                            onChange={(event) => {\r\n                                change(event)\r\n                            }} />\r\n                    <div className=\"input-group-append\">\r\n                        <button className=\"btn btn-outline-secondary\" type=\"button\"\r\n                            id=\"button-addon2\"\r\n                            onClick={(event) => (\r\n                                submit(event)\r\n                            )}>OK</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchCity;","import React from 'react';\r\nimport moment from 'moment';\r\nimport './ViewWeather.css';\r\n\r\nconst ViewWeather = (props) => {\r\n    const {\r\n        date,\r\n        city,\r\n        geoCoords,\r\n        sunrise,\r\n        sunset,\r\n        temp,\r\n        temp_min,\r\n        temp_max,\r\n        pressure,\r\n        wind,\r\n        humidity,\r\n        rain,\r\n        snow,\r\n        cloudiness\r\n    } = props.weather\r\n\r\n    const { error } = props\r\n\r\n    if (error === true) {\r\n        return (\r\n            <h1 className=\"text-center\">City not found</h1>\r\n        )\r\n    }\r\n\r\n    let rainForecast, snowForecast;\r\n\r\n    if (rain) {\r\n        rainForecast = (\r\n            <tr>\r\n                <th scope=\"row\"></th>\r\n                <td>Rain:</td>\r\n                <td>{rain[\"1h\"]}mm</td>\r\n                <td></td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    if (snow) {\r\n        snowForecast = (\r\n            <tr>\r\n                <th scope=\"row\"></th>\r\n                <td>Snow:</td>\r\n                <td>{snow[\"1h\"]}mm</td>\r\n                <td></td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    if (city && geoCoords) {\r\n        return (\r\n            <div>\r\n                <table className=\"table table-borderless\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\"></th>\r\n                            <th scope=\"col\"></th>\r\n                            <th scope=\"col\"></th>\r\n                            <th scope=\"col\"></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th scope=\"row\"></th>\r\n                            <td className='font-weight-bold'>Weather in:</td>\r\n                            <td className='font-italic'>{city}</td>\r\n                            <td></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th scope=\"row\"></th>\r\n                            <td className='font-weight-bold'>Geo coordinates:</td>\r\n                            <td>{[geoCoords]}</td>\r\n                            <td></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th scope=\"row\"></th>\r\n                            <td className='font-weight-bold'>Sunrise:</td>\r\n                            <td>{moment(sunrise, 'X').format('HH:mm DD.MM.YYYY')}</td>\r\n                            <td></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th scope=\"row\"></th>\r\n                            <td className='font-weight-bold'>Sunset:</td>\r\n                            <td>{moment(sunset, 'X').format('HH:mm DD.MM.YYYY')}</td>\r\n                            <td></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th scope=\"row\"></th>\r\n                            <td className='font-weight-bold'>Temperature:</td>\r\n                            <td>{temp}&#176;C</td>\r\n                            <td></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th scope=\"row\"></th>\r\n                            <td className='font-weight-bold'>Min. temperature:</td>\r\n                            <td>{temp_min}&#176;C</td>\r\n                            <td></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th scope=\"row\"></th>\r\n                            <td className='font-weight-bold'>Max. temperature:</td>\r\n                            <td>{temp_max}&#176;C</td>\r\n                            <td></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th scope=\"row\"></th>\r\n                            <td className='font-weight-bold'>Humidity:</td>\r\n                            <td>{humidity}%</td>\r\n                            <td></td>\r\n                        </tr>\r\n                        {rainForecast}\r\n                        {snowForecast}\r\n                        <tr>\r\n                            <th scope=\"row\"></th>\r\n                            <td className='font-weight-bold'>Wind:</td>\r\n                            <td>{wind}m/s</td>\r\n                            <td></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th scope=\"row\"></th>\r\n                            <td className='font-weight-bold'>Cloudiness:</td>\r\n                            <td>{cloudiness}%</td>\r\n                            <td></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th scope=\"row\"></th>\r\n                            <td className='font-weight-bold'>Pressure:</td>\r\n                            <td>{pressure} hPa</td>\r\n                            <td></td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    } else {\r\n        return <h1 className=\"text-center\">No city has been selected</h1>\r\n    }\r\n}\r\n\r\nexport default ViewWeather;\r\n","import React from 'react';\nimport './App.css';\nimport SearchCity from './SearchCity/SearchCity';\nimport ViewWeather from './ViewWeather/ViewWeather';\nimport axios from 'axios';\n\nconst APIKey = '05508bb378ad891b493b0c886cca7a57';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      value: \"\",\n      weather: {\n        date: \"\",\n        city: \"\",\n        geoCoords: \"\",\n        sunrise: \"\",\n        sunset: \"\",\n        temp: \"\",\n        temp_min: \"\",\n        temp_max: \"\",\n        pressure: \"\",\n        wind: \"\",\n        humidity: \"\",\n        rain: \"\",\n        snow: \"\",\n        cloudiness: \"\"\n      },\n      imBusy: false,\n      error: false,\n    }\n  }\n\n  handleInputChange = (event) => {\n    this.setState({\n      value: event.target.value\n    })\n  }\n\n  handleCitySubmit = (event) => {\n    event.preventDefault()\n\n    this.setState({\n      'imBusy': true\n    });\n\n    axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`)\n      .then(res => {\n        const weatherData = res.data;\n\n        console.log('success', weatherData);\n\n        this.setState({\n          imBusy: false,\n          error: false,\n          weather: {\n            date: this.state.date,\n            city: this.state.value,\n            geoCoords: `lat: ${weatherData.coord.lat}, lon: ${weatherData.coord.lon}`,\n            sunrise: weatherData.sys.sunrise,\n            sunset: weatherData.sys.sunset,\n            temp: weatherData.main.temp,\n            temp_min: weatherData.main.temp_min,\n            temp_max: weatherData.main.temp_max,\n            pressure: weatherData.main.pressure,\n            wind: weatherData.wind.speed,\n            humidity: weatherData.main.humidity,\n            rain: weatherData.rain,\n            snow: weatherData.snow,\n            cloudiness: weatherData.clouds.all,\n          }\n        });\n      })\n      .catch(error => {\n        console.log('error', this.state, error);\n        this.setState(prevState => ({\n          error: true,\n          imBusy: false,\n        }));\n      })\n  }\n\n  render() {\n    const { value, weather, imBusy, error } = this.state\n\n    if (imBusy === true) {\n      return (<div className=\"container wrapper\">\n        <h1 className=\"text-center\">Please wait</h1>\n      </div>)\n    }\n    return (\n      <div className=\"wrapper\">\n        <div className=\"app container\">\n          <SearchCity\n            value={this.state.value}\n            change={this.handleInputChange}\n            submit={this.handleCitySubmit}\n          />\n          <ViewWeather\n            error={this.state.error}\n            weather={this.state.weather} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}